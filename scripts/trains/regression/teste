# load model
import joblib
import numpy as np
import pandas as pd

best_model = joblib.load('models/weights/best_xgboost_model.pkl')
ensemble = joblib.load('models/weights/ensemble_model.pkl')

scaler = best_model.named_steps['scaler']

transformed_feature_names = scaler.get_feature_names_out()
print(transformed_feature_names)


# load model
X_new = pd.read_csv('models/weights/juntos.csv')
columns_to_remove = ['Animal', 'ID', 'Frame']
for col in columns_to_remove:
    if col in X_new.columns:
        X_new = X_new.drop(col, axis=1)
        print(f"Coluna '{col}' removida do X_newset.")
    else:
        print(f"Coluna '{col}' não encontrada no X_newset.")


X_new['Height_Ratio'] = X_new['Height_Centroid'] / X_new['Height_average']
X_new['Width_Height_Ratio'] = X_new['Width'] / X_new['Height_average']
X_new['Length_Height_Ratio'] = X_new['Length'] / X_new['Height_average']
X_new['Volume_Area_Ratio'] = X_new['Volume'] / (X_new['Width'] * X_new['Length'])
X_new['Normalized_Width_Height'] = (X_new['Width'] * X_new['Height_average']) / X_new['Length']
X_new['Length_Width_Ratio'] = X_new['Length'] / X_new['Width']
X_new['Sin_Width'] = np.sin(X_new['Width'])
X_new['Cos_Length'] = np.cos(X_new['Length'])

X_new = X_new.drop(['Real'], axis=1, errors='ignore')

# Fazer previsões com o best_model
y_pred_best_model = best_model.predict(X_new)

# Fazer previsões com o ensemble
y_pred_ensemble = ensemble.predict(X_new)

# Exibir as previsões
print("Previsões do best_model:", y_pred_best_model)
print("Previsões do ensemble:", y_pred_ensemble)


import pandas as pd

# Criar um DataFrame com as previsões
df_pred = pd.DataFrame({
    'Previsão_Best_Model': y_pred_best_model,
    'Previsão_Ensemble': y_pred_ensemble
})

# Salvar em um arquivo CSV
df_pred.to_csv('previsoes_modelos.csv', index=False)

print("Previsões salvas em 'previsoes_modelos.csv'.")
